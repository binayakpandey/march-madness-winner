{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3dac4fde",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import StratifiedShuffleSplit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "91fbb68f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data and remove rows with missing target\n",
    "df = pd.read_csv('/Users/binayakpandey/Downloads/MarchMadnessDataTrain.csv')\n",
    "df = df[df['MARCH MADNESS'] != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a698cb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define predictor and target variables\n",
    "predictor_var = ['APG', 'RPG', 'TPG', 'SPG', 'ORPG', 'PPG']\n",
    "outcome_var = \"WINNER\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3b2a7ca8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into training and testing sets using stratified sampling\n",
    "sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in sss.split(df[predictor_var], df[outcome_var]):\n",
    "    X_train, X_test = df[predictor_var].iloc[train_index], df[predictor_var].iloc[test_index]\n",
    "    y_train, y_test = df[outcome_var].iloc[train_index], df[outcome_var].iloc[test_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa9ec451",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set: 0.974\n"
     ]
    }
   ],
   "source": [
    "# Train and evaluate logistic regression model\n",
    "model = LogisticRegression(max_iter=1000)\n",
    "model.fit(X_train, y_train)\n",
    "y_pred = model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy on test set: {:.3f}\".format(accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0be77f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0594d7de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load new data and remove any missing values\n",
    "new_data = pd.read_csv('/Users/binayakpandey/Downloads/MarchMadnessTestData2023.csv').dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b6c7dace",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define predictor variables\n",
    "predictor_var = ['APG', 'RPG', 'TPG', 'SPG', 'ORPG', 'PPG']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e0d80eae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=1000)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load trained model from previous code\n",
    "model = LogisticRegression(max_iter=1000)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7e5f295c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use trained model to predict winners of new games\n",
    "new_data_preds = model.predict_proba(new_data[predictor_var])[:, 1]\n",
    "new_data['WINNER_PRED'] = new_data_preds.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b9b11e87",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_winner = new_data.loc[new_data_preds.argmax(), 'TEAM']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0b929c6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The predicted winner of the tournament is: MarquetteÂ NCAA\n"
     ]
    }
   ],
   "source": [
    "print('The predicted winner of the tournament is:', predicted_winner)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbb28be8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
